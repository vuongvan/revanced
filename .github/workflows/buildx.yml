name: Build Modules X
on:
  workflow_call:
    inputs:
      from_ci:
        type: boolean
        required: false
        default: true

  workflow_dispatch:

jobs:
  run:
    permissions: write-all
    runs-on: ubuntu-latest
    steps:
      - uses: actions/setup-java@v3
        with:
          distribution: "zulu"
          java-version: "17"
          
      - name: Install aapt
        run: |
          sudo apt install aapt jq
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          submodules: true

      - name: Update config
        if: ${{ inputs.from_ci }}
        run: |
          if git checkout origin/update build.md; then
            UPDATE_CFG=$(./build.sh config.toml --config-update)
            if [ "$UPDATE_CFG" ]; then
              echo "$UPDATE_CFG" > config.toml
            fi
          fi

      - name: Get next version code
        id: next_ver_code
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          TAG=$(gh release list -L 1 | awk -F '\t' '{print $3}')
          if [ -z "$TAG" ]; then TAG=0; fi
          echo "NEXT_VER_CODE=$((TAG + 1))" >> $GITHUB_OUTPUT
          
      - name: Build modules/APKs
        run: |
          chmod +x build.sh
          ./build.sh config.toml
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITHUB_REPOSITORY: $GITHUB_REPOSITORY
          NEXT_VER_CODE: ${{ steps.next_ver_code.outputs.NEXT_VER_CODE }}

      - name: Download Manager and MicroG
        id: config_mnmg
        run: |
          wget -q https://vuongvan.github.io/VancedManager/rvmn.apk -O rvmn.apk
          
          
          rm_op=$(find . -maxdepth 1 -name "rvmn.apk" -printf '%P')
          ver_code=$(aapt dump badging $rm_op | sed -n "s/.*versionName='\([^']*\).*/\1/p")
          echo "RM_VER_NAME_OUTPUT=$ver_code"  >> $GITHUB_OUTPUT
          echo $ver_code
          ver_code=$(aapt dump badging $rm_op | sed -n "s/.*versionCode='\([^']*\).*/\1/p")
          echo "RM_VER_CODE_OUTPUT=$ver_code"  >> $GITHUB_OUTPUT
          echo $ver_code
          
          wget -q https://github.com/inotia00/VancedMicroG/releases/latest/download/microg.apk -O microg.apk
          mg_op=$(find . -maxdepth 1 -name "microg.apk" -printf '%P')
          ver_code=$(aapt dump badging $mg_op | sed -n "s/.*versionName='\([^']*\).*/\1/p")
          echo $ver_code
          echo "MG_VER_NAME_OUTPUT=$ver_code"  >> $GITHUB_OUTPUT
          ver_code=$(aapt dump badging $mg_op | sed -n "s/.*versionCode='\([^']*\).*/\1/p")
          echo "MG_VER_CODE_OUTPUT=$ver_code"  >> $GITHUB_OUTPUT
          echo $ver_code
        
      - name: Get output
        id: get_output
        run: |
          DELIM="$(openssl rand -hex 8)"
          echo "BUILD_LOG<<${DELIM}" >> "$GITHUB_OUTPUT"
          cat build.md >> "$GITHUB_OUTPUT"
          echo "${DELIM}" >> "$GITHUB_OUTPUT"
          cp -f build.md build.tmp
          
          cd build
          yt_rv=$(find . -maxdepth 1 -name "youtube-revanced-*.apk" -printf '%P')
          ver_rv=$(aapt dump badging $yt_rv | sed -n "s/.*versionCode='\([^']*\).*/\1/p")
          yt_rx=$(find . -maxdepth 1 -name "youtube-revancedx-*.apk" -printf '%P')
          ver_rx=$(aapt dump badging $yt_rx | sed -n "s/.*versionCode='\([^']*\).*/\1/p")
          echo "YTRV_OUTPUT=$yt_rv"  >> $GITHUB_OUTPUT
          echo "YTRX_OUTPUT=$yt_rx"  >> $GITHUB_OUTPUT
          echo "VERRV_OUTPUT=$ver_rv"  >> $GITHUB_OUTPUT
          echo $ver_rv
          echo "VERRX_OUTPUT=$ver_rx"  >> $GITHUB_OUTPUT
          echo $ver_rx
          if [ -z "$yt_ex" ]; then
            echo "RELEASE_NAME=ReVanced"  >> $GITHUB_OUTPUT
          else
            echo "RELEASE_NAME=ReVanced"  >> $GITHUB_OUTPUT
          fi
          
      - name: Upload modules to release
        uses: svenstaro/upload-release-action@v2
        with:
          body: ${{ steps.get_output.outputs.BUILD_LOG }}
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: ./build/*
          release_name: ReVanced
          tag: ${{ steps.next_ver_code.outputs.NEXT_VER_CODE }}
          file_glob: true
          overwrite: true

      - name: Update changelog and Magisk update json
        id: update_config
        run: |
          git checkout -f update || git switch --discard-changes --orphan update
          
          cp -f build.tmp build.md
          
          echo -e "\n[revanced-magisk-module repo]($GITHUB_SERVER_URL/vuongvan/magisk-module)" >>latest_build.md
          #CHANGELOG_JSON=$(cat build.tmp | sed -e 's/([^()]*)//g' | sed -E ':a;N;$!ba;s/\r{0,1}\n/\\n/g' | sed 's/\*\*//g' | sed 's/\*/\-/g' | sed -e 's/([^()]*\])//g' | tr -d '\`' | tr '\n' ' \n' | sed 's!http[s]\?://\S*!!g' | sed 's/Install \[Vanced Microg\] for non-root YouTube or YT Music//' | sed 's/\[revanced-magisk-module\]//' | tr '\n' ' \n' | ts '%s' )
          #echo $CHANGELOG_JSON
          CHANGELOG_JSON=$(cat build.tmp | sed '/\[/d' )
          
          get_update_rv_json() {
            echo "  \"vanced\": {
                   \"version\": \"$1\",
                   \"versionCode\": $2,
                   \"url\": \"$3\",
                   \"changelog\": \"$4\"
                },"
            }
          get_update_rx_json() {
            echo "  \"music\": {
                   \"version\": \"$1\",
                   \"versionCode\": $2,
                   \"url\": \"$3\",
                   \"changelog\": \"$4\"
                },"
            }
            
          get_update_mn_json() {
            echo "{
            \"is_microg_broken\": false,
            \"manager\": {
                   \"version\": \"$1\",
                   \"versionCode\": $2,
                   \"url\": \"https://vuongvan.github.io/VancedManager/rvmn.apk\",
                   \"changelog\": \"Custom Build APK\"
                },"
            }
          
          get_update_micro_json() {
            echo "  \"microg\": {
                   \"version\": \"$1\",
                   \"versionCode\": $2,
                   \"url\": \"https://github.com/inotia00/VancedMicroG/releases/latest/download/microg.apk\",
                   \"changelog\": \"- Updated libs and upstream to 2022/08/22\n- Removed some unused resources\n- App signature changed\"
                }
          }"
          }
      
          if [ -n "${{ steps.get_output.outputs.YTRV_OUTPUT }}" ]; then
            YTRV_VER=$(echo "${{ steps.get_output.outputs.BUILD_LOG }}" | sed -n 's/.*YouTube:\(.*\)/\1/p' | tr -d '[:space:]')
            YTRX_VER=$(echo "${{ steps.get_output.outputs.BUILD_LOG }}" | sed -n 's/.*YouTube-Extended:\(.*\)/\1/p' | tr -d '[:space:]')
            
            YTRV_VER_CODE=${{ steps.get_output.outputs.VERRV_OUTPUT }}
            YTRX_VER_CODE=${{ steps.get_output.outputs.VERRX_OUTPUT }}
            
            PVER_CODE=$(echo "${{ steps.next_ver_code.outputs.NEXT_VER_CODE }}" | sed -e 's/\.//g')
            
            RM_VER_NAME=${{ steps.config_mnmg.outputs.RM_VER_NAME_OUTPUT }}
            RM_VER_CODE=${{ steps.config_mnmg.outputs.RM_VER_CODE_OUTPUT }}
            MG_VER_NAME=${{ steps.config_mnmg.outputs.MG_VER_NAME_OUTPUT }}
            MG_VER_CODE=${{ steps.config_mnmg.outputs.MG_VER_CODE_OUTPUT }}
            
            YTRV_DLURL="$GITHUB_SERVER_URL/$GITHUB_REPOSITORY/releases/download/${{ steps.next_ver_code.outputs.NEXT_VER_CODE}}/${{ steps.get_output.outputs.YTRV_OUTPUT }}"
            YTRX_DLURL="$GITHUB_SERVER_URL/$GITHUB_REPOSITORY/releases/download/${{ steps.next_ver_code.outputs.NEXT_VER_CODE}}/${{ steps.get_output.outputs.YTRX_OUTPUT }}"
            
            UPDATE_YT_JSON=$(get_update_rv_json "$YTRV_VER" "$YTRV_VER_CODE" "$YTRV_DLURL" "$CHANGELOG_JSON")
            echo "$UPDATE_YT_JSON" >config-rv.json
            echo "$UPDATE_YT_JSON" >yt-config-rv.json
            UPDATE_YT_JSON=$(get_update_rx_json "$YTRX_VER" "$YTRX_VER_CODE" "$YTRX_DLURL" "$CHANGELOG_JSON")
            echo "$UPDATE_YT_JSON" >config-rx.json
            
            UPDATE_YT_JSON=$(get_update_mn_json "$RM_VER_NAME" "$RM_VER_CODE")
            echo "$UPDATE_YT_JSON" >config-mn.json
            
            UPDATE_YT_JSON=$(get_update_micro_json "$MG_VER_NAME" "$MG_VER_CODE")
            echo "$UPDATE_YT_JSON" >config-micro.json
            
            if [ ! -f config-rv.json ]; then : >config-rv.json; fi
            cat config-mn.json config-rv.json config-rx.json config-micro.json > yt-update.json
            cat config-mn.json config-rv.json config-micro.json > yt-stable.json
            cat config-mn.json config-rv.json config-micro.json > yt-old.json
          fi

          #find . -name "*-update.json" | grep . || : >dummy-update.json

      - uses: stefanzweifel/git-auto-commit-action@v4
        with:
          branch: update
          skip_checkout: true
          file_pattern: build.md yt-*.json
          commit_message: Bump version ${{ steps.next_ver_code.outputs.NEXT_VER_CODE }}

      - uses: actions/upload-artifact@v3
        with:
          name: logs
          path: logs
          if-no-files-found: ignore
