name: Build Modules X
on:
  push:
  
  workflow_call:
    inputs:
      from_ci:
        type: boolean
        required: false
        default: true

  workflow_dispatch:

jobs:
  run:
    permissions: write-all
    runs-on: ubuntu-latest
    steps:
      - uses: actions/setup-java@v4
        with:
          distribution: "zulu"
          java-version: "17"
          
      - name: Install aapt
        run: |
          sudo apt install aapt jq curl
        
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          submodules: true
          
      - name: Rename config
        run: |
          cp -f configx.toml config.toml
          
      - name: Update config
        if: ${{ inputs.from_ci }}
        run: |
          if git checkout origin/update build.md; then
            UPDATE_CFG=$(./build.sh config.toml --config-update)
            if [ "$UPDATE_CFG" ]; then
              echo "$UPDATE_CFG" > config.toml
            fi
          fi

      - name: Get next version code
        id: next_ver_code
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          TAG=$(gh release list -L 1 | awk -F '\t' '{print $3}')
          if [ -z "$TAG" ]; then TAG=0; fi
          echo "NEXT_VER_CODE=$((TAG + 1))" >> $GITHUB_OUTPUT
          

        
      - name: Build modules/APKs
        run: |
          chmod +x build.sh
          ./build.sh config.toml
          
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITHUB_REPOSITORY: $GITHUB_REPOSITORY
          NEXT_VER_CODE: ${{ steps.next_ver_code.outputs.NEXT_VER_CODE }}
          
      - name: Get next version code
        id: next_ver_code_1
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          cd temp
          TAG=$(find . -mindepth 2 -name "revanced-patches*.jar" -printf '%P')
          TAG=${TAG##*'-'}
          TAG=${TAG::-4}
          if [ -z "$TAG" ]; then TAG=0; fi
          echo "NEXT_VER_CODE=$TAG" >> $GITHUB_OUTPUT
          echo $TAG
          
      - name: Download Manager and MicroG
        id: config_mnmg
        run: |
          source utils.sh
          rv_gms_rel="https://api.github.com/repos/ReVanced/GmsCore/releases/latest"
          rv_gms_url=$(gh_req "$rv_gms_rel" - | json_get 'browser_download_url' | grep -E '\.apk$') || return 1
          wget -q https://vuongvan.github.io/VancedManager/rvmn.apk -O rvmnrv.apk
          rm_op=$(find . -maxdepth 1 -name "rvmnrv.apk" -printf '%P')
          ver_code=$(aapt dump badging $rm_op | sed -n "s/.*versionName='\([^']*\).*/\1/p")
          echo "RMRV_VER_NAME_OUTPUT=$ver_code"  >> $GITHUB_OUTPUT
          ver_code=$(aapt dump badging $rm_op | sed -n "s/.*versionCode='\([^']*\).*/\1/p")
          echo "RMRV_VER_CODE_OUTPUT=$ver_code"  >> $GITHUB_OUTPUT
          
          wget -q https://vuongvan.github.io/VancedManager/rvmnrx.apk -O rvmnrx.apk
          rm_op=$(find . -maxdepth 1 -name "rvmnrx.apk" -printf '%P')
          ver_code=$(aapt dump badging $rm_op | sed -n "s/.*versionName='\([^']*\).*/\1/p")
          echo "RMRX_VER_NAME_OUTPUT=$ver_code"  >> $GITHUB_OUTPUT
          ver_code=$(aapt dump badging $rm_op | sed -n "s/.*versionCode='\([^']*\).*/\1/p")
          echo "RMRX_VER_CODE_OUTPUT=$ver_code"  >> $GITHUB_OUTPUT
          
          #rv_gms_url="https://github.com/ReVanced/GmsCore/releases/download/v0.3.1.4.240913/app.revanced.android.gms-240913008-signed.apk"
          rv_gms_url=$(echo "$rv_gms_url" | sed '1d' | sed '/^$/d' )
          wget -q $rv_gms_url -O microg.apk
          cp -f microg.apk ./build/microg.apk
          #curl -o microg.apk $rv_gms_url
          #rv_gms_url="https://github.com/vuongvan/revanced-magisk-module/releases/latest/download/microg.apk" 
          echo "MG_URL_OUTPUT=$rv_gms_url" >> $GITHUB_OUTPUT
          echo $rv_gms_url
          mg_op=$(find . -maxdepth 1 -name "microg.apk" -printf '%P')
          ver_code=$(aapt dump badging $mg_op | sed -n "s/.*versionName='\([^']*\).*/\1/p")
          echo $ver_code
          echo "MG_VER_NAME_OUTPUT=$ver_code"  >> $GITHUB_OUTPUT
          ver_code=$(aapt dump badging $mg_op | sed -n "s/.*versionCode='\([^']*\).*/\1/p")
          echo "MG_VER_CODE_OUTPUT=$ver_code"  >> $GITHUB_OUTPUT
          echo $ver_code
        
      - name: Get output
        id: get_output
        run: |
          DELIM="$(openssl rand -hex 8)"
          echo "BUILD_LOG<<${DELIM}" >> "$GITHUB_OUTPUT"
          cat build.md >> "$GITHUB_OUTPUT"
          echo "${DELIM}" >> "$GITHUB_OUTPUT"
          cp -f build.md build.tmp
          
          cd build
          yt_rv=$(find . -maxdepth 1 -name "youtube-rv-*.apk" -printf '%P')
          ver_ytrv=$(aapt dump badging $yt_rv | sed -n "s/.*versionCode='\([^']*\).*/\1/p")  
          ms_rv=$(find . -maxdepth 1 -name "music-rv-*.apk" -printf '%P')
          ver_msrv=$(aapt dump badging $ms_rv | sed -n "s/.*versionCode='\([^']*\).*/\1/p")
          
          yt_rx=$(find . -maxdepth 1 -name "youtube-rx-*.apk" -printf '%P')
          ver_ytrx=$(aapt dump badging $yt_rx | sed -n "s/.*versionCode='\([^']*\).*/\1/p")        
          ms_rx=$(find . -maxdepth 1 -name "music-rx-*.apk" -printf '%P')
          ver_msrx=$(aapt dump badging $ms_rx | sed -n "s/.*versionCode='\([^']*\).*/\1/p")
          
          echo "YTRV_OUTPUT=$yt_rv"  >> $GITHUB_OUTPUT
          echo "MSRV_OUTPUT=$ms_rv"  >> $GITHUB_OUTPUT
          
          echo "YTRX_OUTPUT=$yt_rx"  >> $GITHUB_OUTPUT
          echo "MSRX_OUTPUT=$ms_rx"  >> $GITHUB_OUTPUT
          
          echo "VER_YTRV_OUTPUT=$ver_ytrv"  >> $GITHUB_OUTPUT
          echo "VER_MSRV_OUTPUT=$ver_msrv"  >> $GITHUB_OUTPUT

          echo "VER_YTRX_OUTPUT=$ver_ytrx"  >> $GITHUB_OUTPUT
          echo "VER_MSRX_OUTPUT=$ver_msrx"  >> $GITHUB_OUTPUT
          
          if [ -z "$yt_ex" ]; then
            echo "RELEASE_NAME=ReVanced X"  >> $GITHUB_OUTPUT
          else
            echo "RELEASE_NAME=ReVanced X"  >> $GITHUB_OUTPUT
          fi
          
      - name: Upload modules to release
        uses: svenstaro/upload-release-action@v2
        with:
          body: ${{ steps.get_output.outputs.BUILD_LOG }}
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: ./build/*
          release_name: ReVanced X
          tag: ${{ steps.next_ver_code.outputs.NEXT_VER_CODE }}
          file_glob: true
          overwrite: true

      - name: Update changelog and Magisk update json
        id: update_config
        run: |
          source utils.sh
          PATCHES_SRC="revanced/revanced-patches"
          rv_patches_date=$(gh_req https://api.github.com/repos/${PATCHES_SRC}/releases/latest - | json_get 'updated_at')
          rv_patches_date=$(echo "$rv_patches_date" | sed '1d')
          echo -e "\n$rv_patches_date" >> build.tmp
          git checkout -f update || git switch --discard-changes --orphan update
          
          cp -f build.tmp build.md
          
          echo -e "\n[revanced-magisk-module repo]($GITHUB_SERVER_URL/vuongvan/magisk-module)" >>latest_build.md
          #CHANGELOG_JSON=$(cat build.tmp | sed -e 's/([^()]*)//g' | sed -E ':a;N;$!ba;s/\r{0,1}\n/\\n/g' | sed 's/\*\*//g' | sed 's/\*/\-/g' | sed -e 's/([^()]*\])//g' | tr -d '\`' | tr '\n' ' \n' | sed 's!http[s]\?://\S*!!g' | sed 's/Install \[Vanced Microg\] for non-root YouTube or YT Music//' | sed 's/\[revanced-magisk-module\]//' | tr '\n' ' \n' | ts '%s' )
          #echo $CHANGELOG_JSON
          CHANGELOG_JSON=$(cat build.tmp | sed '/\[/d' )
          
          get_update_yt_json() {
            echo "  \"vanced\": {
                   \"version\": \"$1\",
                   \"versionCode\": $2,
                   \"url\": \"$3\",
                   \"changelog\": \"$4\"
                },"
            }
          get_update_ms_json() {
            echo "  \"music\": {
                   \"version\": \"$1\",
                   \"versionCode\": $2,
                   \"url\": \"$3\",
                   \"changelog\": \"$4\"
                },"
            }
            
          get_update_mn_json() {
            echo "{
            \"is_microg_broken\": false,
            \"manager\": {
                   \"version\": \"$1\",
                   \"versionCode\": $2,
                   \"url\": \"$3\",
                   \"changelog\": \"Custom Build APK\"
                },"
            }
          
          get_update_micro_json() {
            echo "  \"microg\": {
                   \"version\": \"$1\",
                   \"versionCode\": $2,
                   \"url\": \"$3\",
                   \"changelog\": \"- Updated libs and upstream to 2022/08/22\n- Removed some unused resources\n- App signature changed\"
                }
          }"
          }
      
          if [ -n "${{ steps.get_output.outputs.YTRV_OUTPUT }}" ]; then
            YTRV_VER=$(echo "${{ steps.get_output.outputs.BUILD_LOG }}" | sed -n 's/.*YouTube-RV:\(.*\)/\1/p' | tr -d '[:space:]')
            MSRV_VER=$(echo "${{ steps.get_output.outputs.BUILD_LOG }}" | sed -n 's/.*Music-RV:\(.*\)/\1/p' | tr -d '[:space:]')
            YTRV_VER_CODE=${{ steps.get_output.outputs.VER_YTRV_OUTPUT }}
            MSRV_VER_CODE=${{ steps.get_output.outputs.VER_MSRV_OUTPUT }}
            
            RMRV_VER_NAME=${{ steps.config_mnmg.outputs.RMRV_VER_NAME_OUTPUT }}
            RMRV_VER_CODE=${{ steps.config_mnmg.outputs.RMRV_VER_CODE_OUTPUT }}
 
            MG_VER_NAME=${{ steps.config_mnmg.outputs.MG_VER_NAME_OUTPUT }}
            MG_VER_CODE=${{ steps.config_mnmg.outputs.MG_VER_CODE_OUTPUT }}
            MG_URL=${{ steps.config_mnmg.outputs.MG_URL_OUTPUT }}
            
            YTRV_DLURL="$GITHUB_SERVER_URL/$GITHUB_REPOSITORY/releases/download/${{ steps.next_ver_code.outputs.NEXT_VER_CODE}}/${{ steps.get_output.outputs.YTRV_OUTPUT }}"
            MSRV_DLURL="$GITHUB_SERVER_URL/$GITHUB_REPOSITORY/releases/download/${{ steps.next_ver_code.outputs.NEXT_VER_CODE}}/${{ steps.get_output.outputs.MSRV_OUTPUT }}"
            
            UPDATE_YT_JSON=$(get_update_yt_json "$YTRV_VER" "$YTRV_VER_CODE" "$YTRV_DLURL" "$CHANGELOG_JSON")
            echo "$UPDATE_YT_JSON" >config-ytrv.json
            UPDATE_YT_JSON=$(get_update_ms_json "$MSRV_VER" "$MSRV_VER_CODE" "$MSRV_DLURL" "$CHANGELOG_JSON")
            echo "$UPDATE_YT_JSON" >config-msrv.json
     
            UPDATE_YT_JSON=$(get_update_mn_json "$RMRV_VER_NAME" "$RMRV_VER_CODE" "https://github.com/vuongvan/VancedManager/raw/update/rvmn.apk")
            echo "$UPDATE_YT_JSON" >config-mn.json
            UPDATE_YT_JSON=$(get_update_micro_json "$MG_VER_NAME" "$MG_VER_CODE" "$MG_URL" )
            echo "$UPDATE_YT_JSON" >config-micro.json
            
            if [ -n "${{ steps.get_output.outputs.MSRV_OUTPUT }}" ]; then
                cat config-mn.json config-ytrv.json config-msrv.json config-micro.json > yt-updaterv.json
            else
                cat config-mn.json config-ytrv.json config-micro.json > yt-updaterv.json
            fi
          fi
          
          if [ -n "${{ steps.get_output.outputs.YTRX_OUTPUT }}" ]; then
            YTRX_VER=$(echo "${{ steps.get_output.outputs.BUILD_LOG }}" | sed -n 's/.*YouTube-RX:\(.*\)/\1/p' | tr -d '[:space:]')
            MSRX_VER=$(echo "${{ steps.get_output.outputs.BUILD_LOG }}" | sed -n 's/.*Music-RX:\(.*\)/\1/p' | tr -d '[:space:]')
            YTRX_VER_CODE=${{ steps.get_output.outputs.VER_YTRX_OUTPUT }}
            MSRX_VER_CODE=${{ steps.get_output.outputs.VER_MSRX_OUTPUT }}
            
            RMRX_VER_NAME=${{ steps.config_mnmg.outputs.RMRX_VER_NAME_OUTPUT }}
            RMRX_VER_CODE=${{ steps.config_mnmg.outputs.RMRX_VER_CODE_OUTPUT }}
 
            MG_VER_NAME=${{ steps.config_mnmg.outputs.MG_VER_NAME_OUTPUT }}
            MG_VER_CODE=${{ steps.config_mnmg.outputs.MG_VER_CODE_OUTPUT }}
            
            YTRX_DLURL="$GITHUB_SERVER_URL/$GITHUB_REPOSITORY/releases/download/${{ steps.next_ver_code.outputs.NEXT_VER_CODE}}/${{ steps.get_output.outputs.YTRX_OUTPUT }}"
            MSRX_DLURL="$GITHUB_SERVER_URL/$GITHUB_REPOSITORY/releases/download/${{ steps.next_ver_code.outputs.NEXT_VER_CODE}}/${{ steps.get_output.outputs.MSRX_OUTPUT }}"
            
            UPDATE_YT_JSON=$(get_update_yt_json "$YTRX_VER" "$YTRX_VER_CODE" "$YTRX_DLURL" "$CHANGELOG_JSON")
            echo "$UPDATE_YT_JSON" >config-ytrx.json
            UPDATE_YT_JSON=$(get_update_ms_json "$MSRX_VER" "$MSRX_VER_CODE" "$MSRX_DLURL" "$CHANGELOG_JSON")
            echo "$UPDATE_YT_JSON" >config-msrx.json
     
            UPDATE_YT_JSON=$(get_update_mn_json "$RMRX_VER_NAME" "$RMRX_VER_CODE" "https://github.com/vuongvan/VancedManager/raw/update/rvmnrx.apk")
            echo "$UPDATE_YT_JSON" >config-mn.json
            UPDATE_YT_JSON=$(get_update_micro_json "$MG_VER_NAME" "$MG_VER_CODE" "$MG_URL")
            echo "$UPDATE_YT_JSON" >config-micro.json
            
            if [ -n "${{ steps.get_output.outputs.MSRX_OUTPUT }}" ]; then
                cat config-mn.json config-ytrx.json config-msrx.json config-micro.json > yt-updaterx.json
            else
                cat config-mn.json config-ytrx.json config-micro.json > yt-updaterx.json
            fi
          fi

          get_update_json() {
            echo "{
            \"version\": \"$1\",
            \"versionCode\": ${{ steps.next_ver_code.outputs.NEXT_VER_CODE}},
            \"zipUrl\": \"$2\",
            \"changelog\": \"https://raw.githubusercontent.com/$GITHUB_REPOSITORY/update/build.md\"
          }"
          }

          cd build || { echo "build folder not found"; exit 1; }
          for OUTPUT in *magisk*.zip; do
            [ "$OUTPUT" = "*magisk*.zip" ] && continue
            ZIP_S=$(unzip -p "$OUTPUT" module.prop)
            if ! UPDATE_JSON=$(echo "$ZIP_S" | grep updateJson); then continue; fi
            UPDATE_JSON="${UPDATE_JSON##*/}"
            VER=$(echo "$ZIP_S" | grep version=)
            VER="${VER##*=}"
            DLURL="$GITHUB_SERVER_URL/$GITHUB_REPOSITORY/releases/download/${{ steps.next_ver_code.outputs.NEXT_VER_CODE }}/${OUTPUT}"
            get_update_json "$VER" "$DLURL" >"../$UPDATE_JSON"
          done
          cd ..

          find . -name "*-update*.json" | grep . || : >dummy-update.json

      - uses: stefanzweifel/git-auto-commit-action@v5
        with:
          branch: update
          skip_checkout: true
          file_pattern: build.md yt-*.json *-update.json
          commit_message: Bump version ${{ steps.next_ver_code.outputs.NEXT_VER_CODE }}

      - uses: actions/upload-artifact@v3
        with:
          name: logs
          path: logs
          if-no-files-found: ignore
